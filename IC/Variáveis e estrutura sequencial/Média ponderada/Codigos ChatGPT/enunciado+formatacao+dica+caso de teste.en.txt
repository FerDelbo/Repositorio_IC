### enunciado+formatacao+dica+caso de teste.en

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Write a program in python that reads four notes from a student. As output, print the weighted average, knowing that the weights of the evaluations are respectively: 1, 2, 3 and 4.  
The program must receive 4 floating point numbers, which must be applied to each of the notes, with the first note weighing 1, the second 2, the third 3 and the fourth 4. As output, the program must make the weighted average of these 4 notes with the imposed weights. This result must be rounded to one decimal place.  
Tips:  
Inside the print command, use the round(x, n) command to round the number x to up to n decimal places.  
Take as an example the following case of this:  
Input:  
0.0  
0.0  
9.0  
10.0  
Output:  
6.7

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Certainly! Here's a simple Python program that takes four floating-point numbers as input, calculates the weighted average based on the given weights, and then prints the rounded result:

# Function to calculate weighted average
def calculate_weighted_average(note1, note2, note3, note4):
    weight1 = 1
    weight2 = 2
    weight3 = 3
    weight4 = 4

    weighted_sum = (note1 * weight1) + (note2 * weight2) + (note3 * weight3) + (note4 * weight4)
    total_weight = weight1 + weight2 + weight3 + weight4

    weighted_average = weighted_sum / total_weight

    return round(weighted_average, 1)

# Get input from the user
note1 = float(input("Enter the first note: "))
note2 = float(input("Enter the second note: "))
note3 = float(input("Enter the third note: "))
note4 = float(input("Enter the fourth note: "))

# Calculate and print the weighted average
result = calculate_weighted_average(note1, note2, note3, note4)
print(f"The weighted average is: {result}")


You can run this program and input the four floating-point numbers as prompted. The program will then calculate and print the rounded weighted average according to the specified weights.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
From ChatGPT, designed with FancyGPT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~